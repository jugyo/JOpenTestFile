import * as vscode from "vscode";
import path = require("path");
import fs = require("fs");
import mkdirp = require("mkdirp");

export async function open() {
  const editor = vscode.window.activeTextEditor;
  if (!editor) {
    return;
  }

  const activeFilePath = editor.document.fileName;
  console.log({ activeFilePath });

  const candidates = await getCandidatesFor(activeFilePath);
  console.log({ candidates });
  if (candidates.length === 0) {
    await createTestFile(activeFilePath);
    return;
  }
  if (candidates.length === 1) {
    await openFile(candidates[0].file);
    return;
  }

  const picked = await vscode.window.showQuickPick(candidates);
  if (!picked) {
    return;
  }
  console.log(`picked.file: ${picked.file}`);

  await openFile(picked.file);
}

async function openFile(uri: any) {
  const textDocument = await vscode.workspace.openTextDocument(uri);
  await vscode.window.showTextDocument(textDocument);
}

async function getCandidatesFor(activeFile: string) {
  const pattern = getCandidatesGlobPatternFor(activeFile);
  if (!pattern) {
    return [];
  }
  console.log({ pattern });

  const files = await vscode.workspace.findFiles(
    pattern,
    "**/node_modules/**",
    10
  );
  console.log({ files });

  return files.map((file) => ({ label: vscode.workspace.asRelativePath(file.path), file }));
}

function getCandidatesGlobPatternFor(file: string) {
  const parsed = parseTestFileName(file);
  if (parsed) {
    return `**/${parsed.name}.${parsed.ext}`;
  }

  const match = path.basename(file).match(/(.*)\.(\w+)$/);
  if (match) {
    return `**/${match[1]}.{test,spec}.${match[2]}`;
  }
}

function parseTestFileName(file: string) {
  const basename = path.basename(file);
  let match = basename.match(/(.*)\.(test|spec)\.(\w+)$/);
  if (!match) {
    return;
  }

  return {
    name: match[1],
    type: match[2],
    ext: match[3]
  };
}

async function createTestFile(file: string) {
  const isTestFile = parseTestFileName(file);
  if (isTestFile) {
    return;
  }

  const relativePath = vscode.workspace.asRelativePath(file);
  const parsedFilePath = path.parse(relativePath);
  console.log({ parsedFilePath });
  const relativePathOfTestFile = parsedFilePath.dir.replace(/^\w+/, 'test') + '/' + parsedFilePath.name + '.test' + parsedFilePath.ext;
  console.log({ relativePathOfTestFile });
  const testFilePath = file.replace(relativePath, relativePathOfTestFile);
  const testFileNameMatch = testFilePath.match(/[^\/]+$/);

  const filledTestFilePath = await vscode.window.showInputBox({
    value: testFilePath,
    valueSelection: testFileNameMatch && testFileNameMatch.index ? [testFileNameMatch.index, testFilePath.length] : undefined
  });
  if (!filledTestFilePath) {
    return;
  }

  const parsedTestFilePath = path.parse(filledTestFilePath);
  await mkdirp(parsedTestFilePath.dir);
  fs.writeFileSync(filledTestFilePath, '');
  await openFile(filledTestFilePath);
}
